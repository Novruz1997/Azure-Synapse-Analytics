{
	"name": "7_rate_code_MULTILINE_json",
	"properties": {
		"folder": {
			"name": "nyc_taxi/Discovery"
		},
		"content": {
			"query": "use nyc_taxi_discovery\n\n\n--MULTILINEJSON\n\n/*\n\n[ \n    { \n        \"rate_code_id\": 1, \"rate_code\": \"Standard rate\" \n    },\n    { \n        \"rate_code_id\": 2, \"rate_code\": \"JFK\" \n    }, \n    { \n        \"rate_code_id\": 3, \"rate_code\": \"Newark\" \n    }\n]\n\n*/\n\n--MultiLine JSON is exactly the same with Standart JSON, but it is nicely formatted\n-- Again we will read all the JSON data as single record\nSELECT\n    *,\n    rate_code,\n    rate_code_id\n    FROM OPENROWSET(\n        BULK 'rate_code_multi_line.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDTERMINATOR = '0x0b',-- VERTICAL TAB\n        FIELDQUOTE = '0x0b', -- VERTICAL TAB\n        -- THIS IS different JSON format multiline, row terminator is not a new line, it treats the rows as single\n        -- Because our file is different.\n        ROWTERMINATOR = '0x0b'  -- VERTICAL TAB\n    )\nWITH (\n    jsonDoc NVARCHAR(MAX)\n) AS rate_code\nCROSS APPLY OPENJSON(jsonDoc)\nWITH (\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n)\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "nyc_taxi_discovery",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}